
[32minfo: [39m[90mStarting app...[39m

[32minfo: [39m
[32minfo: [39m               .-..-.
[32minfo: [39m
[32minfo: [39m   Sails              <|    .-..-.
[32minfo: [39m   v0.11.0             |\
[32minfo: [39m                      /|.\
[32minfo: [39m                     / || \
[32minfo: [39m                   ,'  |'  \
[32minfo: [39m                .-'.-==|/_--'
[32minfo: [39m                `--'-------' 
[32minfo: [39m   __---___--___---___--___---___--___
[32minfo: [39m ____---___--___---___--___---___--___-__
[32minfo: [39m
[32minfo: [39mServer lifted in `D:\tia`
[32minfo: [39mTo see your app, visit [4mhttp://localhost:1337[24m
[32minfo: [39mTo shut down Sails, press <CTRL> + C at any time.
[37m[39m
[37m[39m
{ _readableState: 
   { highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: false,
     ended: true,
     endEmitted: false,
     reading: false,
     calledRead: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     objectMode: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _maxListeners: 10,
  socket: 
   { _connecting: false,
     _handle: 
      { fd: null,
        writeQueueSize: 0,
        owner: [Circular],
        onread: [Function: onread],
        reading: true },
     _readableState: 
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: false,
        endEmitted: false,
        reading: true,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function],
        close: [Object] },
     _maxListeners: 10,
     _writableState: 
      { highWaterMark: 16384,
        objectMode: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        buffer: [],
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     onend: [Function],
     destroyed: false,
     bytesRead: 421,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        _connections: 1,
        connections: [Getter/Setter],
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:0.0.0.0:1337' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1428330737378,
     _monotonicStartTime: 20406615,
     parser: 
      { _headers: [],
        _url: '',
        onHeaders: [Function: parserOnHeaders],
        onHeadersComplete: [Function: parserOnHeadersComplete],
        onBody: [Function: parserOnBody],
        onMessageComplete: [Function: parserOnMessageComplete],
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function] },
     ondata: [Function],
     _paused: false,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        output: [],
        outputEncodings: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _headerSent: false,
        _header: '',
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        socket: [Circular],
        connection: [Circular],
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: [Object],
        writeHead: [Function: writeHead],
        end: [Function: end],
        jsonx: [Function: jsonx],
        badRequest: [Function: bound],
        forbidden: [Function: bound],
        notFound: [Function: bound],
        ok: [Function: bound],
        serverError: [Function: bound],
        created: [Function: bound],
        negotiate: [Function: bound],
        __: [Function],
        __n: [Function],
        getLocale: [Function],
        setLocale: [Function],
        getCatalog: [Function],
        locale: undefined,
        i18n: [Function],
        guessView: [Function],
        view: [Function] },
     _peername: { address: '127.0.0.1', family: 'IPv4', port: 52866 } },
  connection: 
   { _connecting: false,
     _handle: 
      { fd: null,
        writeQueueSize: 0,
        owner: [Circular],
        onread: [Function: onread],
        reading: true },
     _readableState: 
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: false,
        endEmitted: false,
        reading: true,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function],
        close: [Object] },
     _maxListeners: 10,
     _writableState: 
      { highWaterMark: 16384,
        objectMode: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        buffer: [],
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     onend: [Function],
     destroyed: false,
     bytesRead: 421,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        _connections: 1,
        connections: [Getter/Setter],
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:0.0.0.0:1337' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1428330737378,
     _monotonicStartTime: 20406615,
     parser: 
      { _headers: [],
        _url: '',
        onHeaders: [Function: parserOnHeaders],
        onHeadersComplete: [Function: parserOnHeadersComplete],
        onBody: [Function: parserOnBody],
        onMessageComplete: [Function: parserOnMessageComplete],
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function] },
     ondata: [Function],
     _paused: false,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        output: [],
        outputEncodings: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _headerSent: false,
        _header: '',
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        socket: [Circular],
        connection: [Circular],
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: [Object],
        writeHead: [Function: writeHead],
        end: [Function: end],
        jsonx: [Function: jsonx],
        badRequest: [Function: bound],
        forbidden: [Function: bound],
        notFound: [Function: bound],
        ok: [Function: bound],
        serverError: [Function: bound],
        created: [Function: bound],
        negotiate: [Function: bound],
        __: [Function],
        __n: [Function],
        getLocale: [Function],
        setLocale: [Function],
        getCatalog: [Function],
        locale: undefined,
        i18n: [Function],
        guessView: [Function],
        view: [Function] },
     _peername: { address: '127.0.0.1', family: 'IPv4', port: 52866 } },
  httpVersion: '1.1',
  complete: true,
  headers: 
   { host: 'localhost:1337',
     'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:37.0) Gecko/20100101 Firefox/37.0',
     accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
     'accept-language': 'sk,cs;q=0.8,en-US;q=0.5,en;q=0.3',
     'accept-encoding': 'gzip, deflate',
     cookie: 'sails.sid=s%3AwSdgI_D-2O1aqZ6nJqeBU_PlcZTcf68q.Uup2PuT%2B8mNRObD5YCmqb%2BhNjgyuNiOugE8tIJquhBE',
     connection: 'keep-alive' },
  trailers: {},
  _pendings: [],
  _pendingIndex: 0,
  url: '/canvas/draw',
  method: 'GET',
  statusCode: null,
  client: 
   { _connecting: false,
     _handle: 
      { fd: null,
        writeQueueSize: 0,
        owner: [Circular],
        onread: [Function: onread],
        reading: true },
     _readableState: 
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: false,
        endEmitted: false,
        reading: true,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function],
        close: [Object] },
     _maxListeners: 10,
     _writableState: 
      { highWaterMark: 16384,
        objectMode: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        buffer: [],
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     onend: [Function],
     destroyed: false,
     bytesRead: 421,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        _connections: 1,
        connections: [Getter/Setter],
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:0.0.0.0:1337' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1428330737378,
     _monotonicStartTime: 20406615,
     parser: 
      { _headers: [],
        _url: '',
        onHeaders: [Function: parserOnHeaders],
        onHeadersComplete: [Function: parserOnHeadersComplete],
        onBody: [Function: parserOnBody],
        onMessageComplete: [Function: parserOnMessageComplete],
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function] },
     ondata: [Function],
     _paused: false,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        output: [],
        outputEncodings: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _headerSent: false,
        _header: '',
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        socket: [Circular],
        connection: [Circular],
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: [Object],
        writeHead: [Function: writeHead],
        end: [Function: end],
        jsonx: [Function: jsonx],
        badRequest: [Function: bound],
        forbidden: [Function: bound],
        notFound: [Function: bound],
        ok: [Function: bound],
        serverError: [Function: bound],
        created: [Function: bound],
        negotiate: [Function: bound],
        __: [Function],
        __n: [Function],
        getLocale: [Function],
        setLocale: [Function],
        getCatalog: [Function],
        locale: undefined,
        i18n: [Function],
        guessView: [Function],
        view: [Function] },
     _peername: { address: '127.0.0.1', family: 'IPv4', port: 52866 } },
  _consuming: false,
  _dumped: false,
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  upgrade: false,
  originalUrl: '/canvas/draw',
  _parsedUrl: 
   { protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/canvas/draw',
     path: '/canvas/draw',
     href: '/canvas/draw',
     _raw: '/canvas/draw' },
  query: {},
  res: 
   { domain: null,
     _events: { finish: [Function] },
     _maxListeners: 10,
     output: [],
     outputEncodings: [],
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _headerSent: false,
     _header: '',
     _hasBody: true,
     _trailer: '',
     finished: false,
     _hangupClose: false,
     socket: 
      { _connecting: false,
        _handle: [Object],
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: 10,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        onend: [Function],
        destroyed: false,
        bytesRead: 421,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1428330737378,
        _monotonicStartTime: 20406615,
        parser: [Object],
        ondata: [Function],
        _paused: false,
        _httpMessage: [Circular],
        _peername: [Object] },
     connection: 
      { _connecting: false,
        _handle: [Object],
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: 10,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        onend: [Function],
        destroyed: false,
        bytesRead: 421,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1428330737378,
        _monotonicStartTime: 20406615,
        parser: [Object],
        ondata: [Function],
        _paused: false,
        _httpMessage: [Circular],
        _peername: [Object] },
     _headers: 
      { 'x-powered-by': 'Sails <sailsjs.org>',
        'access-control-allow-origin': '',
        'access-control-allow-credentials': '',
        'access-control-allow-methods': '',
        'access-control-allow-headers': '' },
     _headerNames: 
      { 'x-powered-by': 'X-Powered-By',
        'access-control-allow-origin': 'Access-Control-Allow-Origin',
        'access-control-allow-credentials': 'Access-Control-Allow-Credentials',
        'access-control-allow-methods': 'Access-Control-Allow-Methods',
        'access-control-allow-headers': 'Access-Control-Allow-Headers' },
     req: [Circular],
     locals: 
      { [Function: locals]
        _: [Object],
        util: [Object],
        session: [Object],
        req: [Circular],
        res: [Circular],
        sails: 
         
           |>   [a lifted Sails app on port 1337]
         \___/  For help, see: http://links.sailsjs.org/docs
         
         Tip: Use `sails.config` to access your app's runtime configuration.
         
         2 Models:
         Canvas,User
         
         3 Controllers:
         CanvasController,SessionController,UserController
         
         20 Hooks:
         moduleloader,logger,request,orm,views,blueprints,responses,controllers,sockets,pubsub,policies,services,csrf,cors,i18n,userconfig,session,grunt,http,userhooks
         ,
        title: undefined,
        __: [Function],
        __n: [Function],
        getLocale: [Function],
        setLocale: [Function],
        getCatalog: [Function],
        locale: undefined,
        i18n: [Function],
        _csrf: 'Q3l1NaEA-Ik4kcLipjSrRZJfb8qFXNnM-e4c',
        flash: {} },
     writeHead: [Function: writeHead],
     end: [Function: end],
     jsonx: [Function: jsonx],
     badRequest: [Function: bound],
     forbidden: [Function: bound],
     notFound: [Function: bound],
     ok: [Function: bound],
     serverError: [Function: bound],
     created: [Function: bound],
     negotiate: [Function: bound],
     __: [Function],
     __n: [Function],
     getLocale: [Function],
     setLocale: [Function],
     getCatalog: [Function],
     locale: undefined,
     i18n: [Function],
     guessView: [Function],
     view: [Function] },
  next: [Function: next],
  _startTime: Mon Apr 06 2015 16:32:17 GMT+0200 (Stredoeurópsky čas (letný)),
  secret: 'c338a823fd678cb57404fba865c4045c',
  cookies: {},
  signedCookies: { 'sails.sid': 'wSdgI_D-2O1aqZ6nJqeBU_PlcZTcf68q' },
  _parsedOriginalUrl: 
   { protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/canvas/draw',
     path: '/canvas/draw',
     href: '/canvas/draw',
     _raw: '/canvas/draw' },
  sessionStore: 
   { sessions: {},
     generate: [Function],
     _events: { disconnect: [Object], connect: [Object] } },
  sessionID: 'G4Cpd6fxjZgwtr6jW5g8xUE13SVdLSod',
  session: 
   { cookie: 
      { path: '/',
        _expires: null,
        originalMaxAge: null,
        httpOnly: true },
     csrfSecret: 'tUFtRymyb7vBSBOogYaORD07' },
  file: [Function],
  originalMethod: 'GET',
  _route_index: 14,
  route: 
   { path: '/canvas/draw/:id?',
     method: 'get',
     callbacks: [ [Function: routeTargetFnWrapper] ],
     keys: [ [Object] ],
     regexp: /^\/canvas\/draw(?:\/([^\/]+?))?\/?$/i,
     params: [ id: undefined ] },
  params: [ id: undefined ],
  options: 
   { detectedVerb: 
      { verb: '',
        original: '/canvas/draw/:id?',
        path: '/canvas/draw/:id?' },
     skipRegex: [],
     _middlewareType: 'CORS HOOK: clearHeaders',
     action: 'draw',
     controller: 'canvas',
     actions: true,
     index: true,
     shortcuts: true,
     rest: true,
     prefix: '',
     restPrefix: '',
     pluralize: false,
     populate: true,
     autoWatch: true },
  allParams: [Function],
  flash: [Function: _flash],
  _sails: 
   
     |>   [a lifted Sails app on port 1337]
   \___/  For help, see: http://links.sailsjs.org/docs
   
   Tip: Use `sails.config` to access your app's runtime configuration.
   
   2 Models:
   Canvas,User
   
   3 Controllers:
   CanvasController,SessionController,UserController
   
   20 Hooks:
   moduleloader,logger,request,orm,views,blueprints,responses,controllers,sockets,pubsub,policies,services,csrf,cors,i18n,userconfig,session,grunt,http,userhooks
   ,
  port: 1337,
  baseUrl: 'http://localhost:1337',
  validate: [Function: _validate],
  explicitlyAcceptsHTML: true,
  wantsJSON: undefined,
  _modifiedRouteParams: [],
  languages: [ 'sk', 'cs', 'en', 'en' ],
  regions: [ 'us' ],
  language: 'sk',
  region: 'us',
  __: [Function],
  __n: [Function],
  getLocale: [Function],
  setLocale: [Function],
  getCatalog: [Function],
  csrfToken: [Function: csrfToken] }
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
{ domain: null,
  _events: { finish: [Function] },
  _maxListeners: 10,
  output: [],
  outputEncodings: [],
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _headerSent: false,
  _header: '',
  _hasBody: true,
  _trailer: '',
  finished: false,
  _hangupClose: false,
  socket: 
   { _connecting: false,
     _handle: 
      { fd: null,
        writeQueueSize: 0,
        owner: [Circular],
        onread: [Function: onread],
        reading: true },
     _readableState: 
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: false,
        endEmitted: false,
        reading: true,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function],
        close: [Object] },
     _maxListeners: 10,
     _writableState: 
      { highWaterMark: 16384,
        objectMode: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        buffer: [],
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     onend: [Function],
     destroyed: false,
     bytesRead: 421,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        _connections: 1,
        connections: [Getter/Setter],
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:0.0.0.0:1337' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1428330737378,
     _monotonicStartTime: 20406615,
     parser: 
      { _headers: [],
        _url: '',
        onHeaders: [Function: parserOnHeaders],
        onHeadersComplete: [Function: parserOnHeadersComplete],
        onBody: [Function: parserOnBody],
        onMessageComplete: [Function: parserOnMessageComplete],
        socket: [Circular],
        incoming: [Object],
        maxHeaderPairs: 2000,
        onIncoming: [Function] },
     ondata: [Function],
     _paused: false,
     _httpMessage: [Circular],
     _peername: { address: '127.0.0.1', family: 'IPv4', port: 52866 } },
  connection: 
   { _connecting: false,
     _handle: 
      { fd: null,
        writeQueueSize: 0,
        owner: [Circular],
        onread: [Function: onread],
        reading: true },
     _readableState: 
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: false,
        endEmitted: false,
        reading: true,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function],
        close: [Object] },
     _maxListeners: 10,
     _writableState: 
      { highWaterMark: 16384,
        objectMode: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        buffer: [],
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     onend: [Function],
     destroyed: false,
     bytesRead: 421,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        _connections: 1,
        connections: [Getter/Setter],
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:0.0.0.0:1337' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1428330737378,
     _monotonicStartTime: 20406615,
     parser: 
      { _headers: [],
        _url: '',
        onHeaders: [Function: parserOnHeaders],
        onHeadersComplete: [Function: parserOnHeadersComplete],
        onBody: [Function: parserOnBody],
        onMessageComplete: [Function: parserOnMessageComplete],
        socket: [Circular],
        incoming: [Object],
        maxHeaderPairs: 2000,
        onIncoming: [Function] },
     ondata: [Function],
     _paused: false,
     _httpMessage: [Circular],
     _peername: { address: '127.0.0.1', family: 'IPv4', port: 52866 } },
  _headers: 
   { 'x-powered-by': 'Sails <sailsjs.org>',
     'access-control-allow-origin': '',
     'access-control-allow-credentials': '',
     'access-control-allow-methods': '',
     'access-control-allow-headers': '' },
  _headerNames: 
   { 'x-powered-by': 'X-Powered-By',
     'access-control-allow-origin': 'Access-Control-Allow-Origin',
     'access-control-allow-credentials': 'Access-Control-Allow-Credentials',
     'access-control-allow-methods': 'Access-Control-Allow-Methods',
     'access-control-allow-headers': 'Access-Control-Allow-Headers' },
  req: 
   { _readableState: 
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: true,
        endEmitted: false,
        reading: false,
        calledRead: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: {},
     _maxListeners: 10,
     socket: 
      { _connecting: false,
        _handle: [Object],
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: 10,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        onend: [Function],
        destroyed: false,
        bytesRead: 421,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1428330737378,
        _monotonicStartTime: 20406615,
        parser: [Object],
        ondata: [Function],
        _paused: false,
        _httpMessage: [Circular],
        _peername: [Object] },
     connection: 
      { _connecting: false,
        _handle: [Object],
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: 10,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        onend: [Function],
        destroyed: false,
        bytesRead: 421,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1428330737378,
        _monotonicStartTime: 20406615,
        parser: [Object],
        ondata: [Function],
        _paused: false,
        _httpMessage: [Circular],
        _peername: [Object] },
     httpVersion: '1.1',
     complete: true,
     headers: 
      { host: 'localhost:1337',
        'user-agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:37.0) Gecko/20100101 Firefox/37.0',
        accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'accept-language': 'sk,cs;q=0.8,en-US;q=0.5,en;q=0.3',
        'accept-encoding': 'gzip, deflate',
        cookie: 'sails.sid=s%3AwSdgI_D-2O1aqZ6nJqeBU_PlcZTcf68q.Uup2PuT%2B8mNRObD5YCmqb%2BhNjgyuNiOugE8tIJquhBE',
        connection: 'keep-alive' },
     trailers: {},
     _pendings: [],
     _pendingIndex: 0,
     url: '/canvas/draw',
     method: 'GET',
     statusCode: null,
     client: 
      { _connecting: false,
        _handle: [Object],
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: 10,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        onend: [Function],
        destroyed: false,
        bytesRead: 421,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1428330737378,
        _monotonicStartTime: 20406615,
        parser: [Object],
        ondata: [Function],
        _paused: false,
        _httpMessage: [Circular],
        _peername: [Object] },
     _consuming: false,
     _dumped: false,
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     upgrade: false,
     originalUrl: '/canvas/draw',
     _parsedUrl: 
      { protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/canvas/draw',
        path: '/canvas/draw',
        href: '/canvas/draw',
        _raw: '/canvas/draw' },
     query: {},
     res: [Circular],
     next: [Function: next],
     _startTime: Mon Apr 06 2015 16:32:17 GMT+0200 (Stredoeurópsky čas (letný)),
     secret: 'c338a823fd678cb57404fba865c4045c',
     cookies: {},
     signedCookies: { 'sails.sid': 'wSdgI_D-2O1aqZ6nJqeBU_PlcZTcf68q' },
     _parsedOriginalUrl: 
      { protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/canvas/draw',
        path: '/canvas/draw',
        href: '/canvas/draw',
        _raw: '/canvas/draw' },
     sessionStore: { sessions: {}, generate: [Function], _events: [Object] },
     sessionID: 'G4Cpd6fxjZgwtr6jW5g8xUE13SVdLSod',
     session: { cookie: [Object], csrfSecret: 'tUFtRymyb7vBSBOogYaORD07' },
     file: [Function],
     originalMethod: 'GET',
     _route_index: 14,
     route: 
      { path: '/canvas/draw/:id?',
        method: 'get',
        callbacks: [Object],
        keys: [Object],
        regexp: /^\/canvas\/draw(?:\/([^\/]+?))?\/?$/i,
        params: [Object] },
     params: [ id: undefined ],
     options: 
      { detectedVerb: [Object],
        skipRegex: [],
        _middlewareType: 'CORS HOOK: clearHeaders',
        action: 'draw',
        controller: 'canvas',
        actions: true,
        index: true,
        shortcuts: true,
        rest: true,
        prefix: '',
        restPrefix: '',
        pluralize: false,
        populate: true,
        autoWatch: true },
     allParams: [Function],
     flash: [Function: _flash],
     _sails: 
      
        |>   [a lifted Sails app on port 1337]
      \___/  For help, see: http://links.sailsjs.org/docs
      
      Tip: Use `sails.config` to access your app's runtime configuration.
      
      2 Models:
      Canvas,User
      
      3 Controllers:
      CanvasController,SessionController,UserController
      
      20 Hooks:
      moduleloader,logger,request,orm,views,blueprints,responses,controllers,sockets,pubsub,policies,services,csrf,cors,i18n,userconfig,session,grunt,http,userhooks
      ,
     port: 1337,
     baseUrl: 'http://localhost:1337',
     validate: [Function: _validate],
     explicitlyAcceptsHTML: true,
     wantsJSON: undefined,
     _modifiedRouteParams: [],
     languages: [ 'sk', 'cs', 'en', 'en' ],
     regions: [ 'us' ],
     language: 'sk',
     region: 'us',
     __: [Function],
     __n: [Function],
     getLocale: [Function],
     setLocale: [Function],
     getCatalog: [Function],
     csrfToken: [Function: csrfToken] },
  locals: 
   { [Function: locals]
     _: 
      { [Function: lodash]
        support: [Object],
        templateSettings: [Object],
        after: [Function: after],
        assign: [Function],
        at: [Function: at],
        bind: [Function: bind],
        bindAll: [Function: bindAll],
        bindKey: [Function: bindKey],
        chain: [Function: chain],
        compact: [Function: compact],
        compose: [Function: compose],
        constant: [Function: constant],
        countBy: [Function],
        create: [Function: create],
        createCallback: [Function: createCallback],
        curry: [Function: curry],
        debounce: [Function: debounce],
        defaults: [Function],
        defer: [Function: defer],
        delay: [Function: delay],
        difference: [Function: difference],
        filter: [Function: filter],
        flatten: [Function: flatten],
        forEach: [Function: forEach],
        forEachRight: [Function: forEachRight],
        forIn: [Function],
        forInRight: [Function: forInRight],
        forOwn: [Function],
        forOwnRight: [Function: forOwnRight],
        functions: [Function: functions],
        groupBy: [Function],
        indexBy: [Function],
        initial: [Function: initial],
        intersection: [Function: intersection],
        invert: [Function: invert],
        invoke: [Function: invoke],
        keys: [Function],
        map: [Function: map],
        mapValues: [Function: mapValues],
        max: [Function: max],
        memoize: [Function: memoize],
        merge: [Function: merge],
        min: [Function: min],
        omit: [Function: omit],
        once: [Function: once],
        pairs: [Function: pairs],
        partial: [Function: partial],
        partialRight: [Function: partialRight],
        pick: [Function: pick],
        pluck: [Function: map],
        property: [Function: property],
        pull: [Function: pull],
        range: [Function: range],
        reject: [Function: reject],
        remove: [Function: remove],
        rest: [Function: rest],
        shuffle: [Function: shuffle],
        sortBy: [Function: sortBy],
        tap: [Function: tap],
        throttle: [Function: throttle],
        times: [Function: times],
        toArray: [Function: toArray],
        transform: [Function: transform],
        union: [Function: union],
        uniq: [Function: uniq],
        values: [Function: values],
        where: [Function: filter],
        without: [Function: without],
        wrap: [Function: wrap],
        xor: [Function: xor],
        zip: [Function: zip],
        zipObject: [Function: zipObject],
        collect: [Function: map],
        drop: [Function: rest],
        each: [Function: forEach],
        eachRight: [Function: forEachRight],
        extend: [Function],
        methods: [Function: functions],
        object: [Function: zipObject],
        select: [Function: filter],
        tail: [Function: rest],
        unique: [Function: uniq],
        unzip: [Function: zip],
        clone: [Function: clone],
        cloneDeep: [Function: cloneDeep],
        contains: [Function: contains],
        escape: [Function: escape],
        every: [Function: every],
        find: [Function: find],
        findIndex: [Function: findIndex],
        findKey: [Function: findKey],
        findLast: [Function: findLast],
        findLastIndex: [Function: findLastIndex],
        findLastKey: [Function: findLastKey],
        has: [Function: has],
        identity: [Function: identity],
        indexOf: [Function: indexOf],
        isArguments: [Function: isArguments],
        isArray: [Function: isArray],
        isBoolean: [Function: isBoolean],
        isDate: [Function: isDate],
        isElement: [Function: isElement],
        isEmpty: [Function: isEmpty],
        isEqual: [Function: isEqual],
        isFinite: [Function: isFinite],
        isFunction: [Function: isFunction],
        isNaN: [Function: isNaN],
        isNull: [Function: isNull],
        isNumber: [Function: isNumber],
        isObject: [Function: isObject],
        isPlainObject: [Function],
        isRegExp: [Function: isRegExp],
        isString: [Function: isString],
        isUndefined: [Function: isUndefined],
        lastIndexOf: [Function: lastIndexOf],
        mixin: [Function: mixin],
        noConflict: [Function: noConflict],
        noop: [Function: noop],
        now: [Function: now],
        parseInt: [Function],
        random: [Function: random],
        reduce: [Function: reduce],
        reduceRight: [Function: reduceRight],
        result: [Function: result],
        runInContext: [Function: runInContext],
        size: [Function: size],
        some: [Function: some],
        sortedIndex: [Function: sortedIndex],
        template: [Function: template],
        unescape: [Function: unescape],
        uniqueId: [Function: uniqueId],
        all: [Function: every],
        any: [Function: some],
        detect: [Function: find],
        findWhere: [Function: find],
        foldl: [Function: reduce],
        foldr: [Function: reduceRight],
        include: [Function: contains],
        inject: [Function: reduce],
        first: [Function: first],
        last: [Function: last],
        sample: [Function: sample],
        take: [Function: first],
        head: [Function: first],
        VERSION: '2.4.1',
        _: [Circular],
        str: [Object] },
     util: 
      { support: [Object],
        templateSettings: [Object],
        after: [Function: after],
        assign: [Function],
        at: [Function: at],
        bind: [Function: bind],
        bindAll: [Function: bindAll],
        bindKey: [Function: bindKey],
        chain: [Function: chain],
        compact: [Function: compact],
        compose: [Function: compose],
        constant: [Function: constant],
        countBy: [Function],
        create: [Function: create],
        createCallback: [Function: createCallback],
        curry: [Function: curry],
        debounce: [Function: debounce],
        defaults: [Function],
        defer: [Function: defer],
        delay: [Function: delay],
        difference: [Function: difference],
        filter: [Function: filter],
        flatten: [Function: flatten],
        forEach: [Function: forEach],
        forEachRight: [Function: forEachRight],
        forIn: [Function],
        forInRight: [Function: forInRight],
        forOwn: [Function],
        forOwnRight: [Function: forOwnRight],
        functions: [Function: functions],
        groupBy: [Function],
        indexBy: [Function],
        initial: [Function: initial],
        intersection: [Function: intersection],
        invert: [Function: invert],
        invoke: [Function: invoke],
        keys: [Function],
        map: [Function: map],
        mapValues: [Function: mapValues],
        max: [Function: max],
        memoize: [Function: memoize],
        merge: [Function: merge],
        min: [Function: min],
        omit: [Function: omit],
        once: [Function: once],
        pairs: [Function: pairs],
        partial: [Function: partial],
        partialRight: [Function: partialRight],
        pick: [Function: pick],
        pluck: [Function: map],
        property: [Function: property],
        pull: [Function: pull],
        range: [Function: range],
        reject: [Function: reject],
        remove: [Function: remove],
        rest: [Function: rest],
        shuffle: [Function: shuffle],
        sortBy: [Function: sortBy],
        tap: [Function: tap],
        throttle: [Function: throttle],
        times: [Function: times],
        toArray: [Function: toArray],
        transform: [Function: transform],
        union: [Function: union],
        uniq: [Function: uniq],
        values: [Function: values],
        where: [Function: filter],
        without: [Function: without],
        wrap: [Function: wrap],
        xor: [Function: xor],
        zip: [Function: zip],
        zipObject: [Function: zipObject],
        collect: [Function: map],
        drop: [Function: rest],
        each: [Function: forEach],
        eachRight: [Function: forEachRight],
        extend: [Function],
        methods: [Function: functions],
        object: [Function: zipObject],
        select: [Function: filter],
        tail: [Function: rest],
        unique: [Function: uniq],
        unzip: [Function: zip],
        clone: [Function: clone],
        cloneDeep: [Function: cloneDeep],
        contains: [Function: contains],
        escape: [Function: escape],
        every: [Function: every],
        find: [Function: find],
        findIndex: [Function: findIndex],
        findKey: [Function: findKey],
        findLast: [Function: findLast],
        findLastIndex: [Function: findLastIndex],
        findLastKey: [Function: findLastKey],
        has: [Function: has],
        identity: [Function: identity],
        indexOf: [Function: indexOf],
        isArguments: [Function: isArguments],
        isArray: [Function: isArray],
        isBoolean: [Function: isBoolean],
        isDate: [Function: isDate],
        isElement: [Function: isElement],
        isEmpty: [Function: isEmpty],
        isEqual: [Function: isEqual],
        isFinite: [Function: isFinite],
        isFunction: [Function: isFunction],
        isNaN: [Function: isNaN],
        isNull: [Function: isNull],
        isNumber: [Function: isNumber],
        isObject: [Function: isObject],
        isPlainObject: [Function],
        isRegExp: [Function: isRegExp],
        isString: [Function: isString],
        isUndefined: [Function: isUndefined],
        lastIndexOf: [Function: lastIndexOf],
        mixin: [Function: mixin],
        noConflict: [Function: noConflict],
        noop: [Function: noop],
        now: [Function: now],
        parseInt: [Function],
        random: [Function: random],
        reduce: [Function: reduce],
        reduceRight: [Function: reduceRight],
        result: [Function: result],
        runInContext: [Function: runInContext],
        size: [Function: size],
        some: [Function: some],
        sortedIndex: [Function: sortedIndex],
        template: [Function: template],
        unescape: [Function: unescape],
        uniqueId: [Function: uniqueId],
        all: [Function: every],
        any: [Function: some],
        detect: [Function: find],
        findWhere: [Function: find],
        foldl: [Function: reduce],
        foldr: [Function: reduceRight],
        include: [Function: contains],
        inject: [Function: reduce],
        first: [Function: first],
        last: [Function: last],
        sample: [Function: sample],
        take: [Function: first],
        head: [Function: first],
        VERSION: '2.4.1',
        _: [Object],
        str: [Object],
        fs: [Object],
        getCLIConfig: [Function],
        usage: [Object],
        generateFile: [Function],
        generateDir: [Function],
        verifyDoesntExist: [Function],
        fileExists: [Function],
        verifyExists: [Function],
        copyBoilerplate: [Function],
        copySails: [Function],
        copySailsDependency: [Function],
        format: [Function],
        deprecate: [Function],
        print: [Function],
        puts: [Function],
        debug: [Function],
        error: [Function],
        inspect: [Object],
        isError: [Function],
        p: [Function: deprecated],
        log: [Function],
        exec: [Function: deprecated],
        pump: [Function: deprecated],
        inherits: [Function],
        _extend: [Function],
        normalizeControllerId: [Function: normalizeControllerId],
        normalizeId: [Function: normalizeId],
        isValidECMA51Variable: [Function],
        defaultsDeep: [Function: bound],
        normalizeErrors: [Function: normalizeErrors],
        detectVerb: [Function],
        pluralize: [Function: pluralize],
        safeToEval: [Function],
        isDictionary: [Function: isDictionary],
        optional: [Function: wrapOptionalCallback],
        isSameOrigin: [Function: isSameOrigin],
        fileExtension: [Function],
        ordinal: [Function],
        getParamNames: [Function],
        parseJSONFile: [Function],
        parseJSONFileSync: [Function],
        getPackage: [Function],
        getPackageSync: [Function],
        homeDirectory: [Function],
        tolerantParse: [Function],
        stringify: [Function],
        objMap: [Function],
        objFilter: [Function],
        objReject: [Function],
        objInvoke: [Function],
        objCompact: [Function] },
     session: { cookie: [Object], csrfSecret: 'tUFtRymyb7vBSBOogYaORD07' },
     req: 
      { _readableState: [Object],
        readable: true,
        domain: null,
        _events: {},
        _maxListeners: 10,
        socket: [Object],
        connection: [Object],
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        trailers: {},
        _pendings: [],
        _pendingIndex: 0,
        url: '/canvas/draw',
        method: 'GET',
        statusCode: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        upgrade: false,
        originalUrl: '/canvas/draw',
        _parsedUrl: [Object],
        query: {},
        res: [Circular],
        next: [Function: next],
        _startTime: Mon Apr 06 2015 16:32:17 GMT+0200 (Stredoeurópsky čas (letný)),
        secret: 'c338a823fd678cb57404fba865c4045c',
        cookies: {},
        signedCookies: [Object],
        _parsedOriginalUrl: [Object],
        sessionStore: [Object],
        sessionID: 'G4Cpd6fxjZgwtr6jW5g8xUE13SVdLSod',
        session: [Object],
        file: [Function],
        originalMethod: 'GET',
        _route_index: 14,
        route: [Object],
        params: [Object],
        options: [Object],
        allParams: [Function],
        flash: [Function: _flash],
        _sails: 
         
           |>   [a lifted Sails app on port 1337]
         \___/  For help, see: http://links.sailsjs.org/docs
         
         Tip: Use `sails.config` to access your app's runtime configuration.
         
         2 Models:
         Canvas,User
         
         3 Controllers:
         CanvasController,SessionController,UserController
         
         20 Hooks:
         moduleloader,logger,request,orm,views,blueprints,responses,controllers,sockets,pubsub,policies,services,csrf,cors,i18n,userconfig,session,grunt,http,userhooks
         ,
        port: 1337,
        baseUrl: 'http://localhost:1337',
        validate: [Function: _validate],
        explicitlyAcceptsHTML: true,
        wantsJSON: undefined,
        _modifiedRouteParams: [],
        languages: [Object],
        regions: [Object],
        language: 'sk',
        region: 'us',
        __: [Function],
        __n: [Function],
        getLocale: [Function],
        setLocale: [Function],
        getCatalog: [Function],
        csrfToken: [Function: csrfToken] },
     res: [Circular],
     sails: 
      
        |>   [a lifted Sails app on port 1337]
      \___/  For help, see: http://links.sailsjs.org/docs
      
      Tip: Use `sails.config` to access your app's runtime configuration.
      
      2 Models:
      Canvas,User
      
      3 Controllers:
      CanvasController,SessionController,UserController
      
      20 Hooks:
      moduleloader,logger,request,orm,views,blueprints,responses,controllers,sockets,pubsub,policies,services,csrf,cors,i18n,userconfig,session,grunt,http,userhooks
      ,
     title: undefined,
     __: [Function],
     __n: [Function],
     getLocale: [Function],
     setLocale: [Function],
     getCatalog: [Function],
     locale: undefined,
     i18n: [Function],
     _csrf: 'Q3l1NaEA-Ik4kcLipjSrRZJfb8qFXNnM-e4c',
     flash: {} },
  writeHead: [Function: writeHead],
  end: [Function: end],
  jsonx: [Function: jsonx],
  badRequest: [Function: bound],
  forbidden: [Function: bound],
  notFound: [Function: bound],
  ok: [Function: bound],
  serverError: [Function: bound],
  created: [Function: bound],
  negotiate: [Function: bound],
  __: [Function],
  __n: [Function],
  getLocale: [Function],
  setLocale: [Function],
  getCatalog: [Function],
  locale: undefined,
  i18n: [Function],
  guessView: [Function],
  view: [Function] }
nemam id
Terminate batch job (Y/N)? 
